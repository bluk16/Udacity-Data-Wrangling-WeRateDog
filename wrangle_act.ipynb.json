{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Udacity Data Analyst Project: WeRateDog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This project provide practice and learning experience in Data wrangling, which consists of:\n",
    "1. **Gathering data**\n",
    "2. **Assessing data**\n",
    "3. **Cleaning data**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Gathering Data**\n",
    "Gather each of the three pieces of data as described below in thid Jupyter Notebook:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. The WeRateDogs Twitter archive. I am giving this file to you, so imagine it as a file on hand. Download this file manually by clicking the following link: `twitter_archive_enhanced.csv`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. The tweet image predictions, i.e., what breed of dog (or other object, animal, etc.) is present in each tweet according to a neural network. This file (image_predictions.tsv) is hosted on Udacity's servers and should be downloaded programmatically using the Requests library and the following URL: https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import os\n",
    "import pandas as pd\n",
    "import json\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv'\n",
    "currentWorkSpacePath = '/home/workspace'\n",
    "fileName = url.split('/')[-1]\n",
    "response = requests.get(url)\n",
    "\n",
    "with open(os.path.join(currentWorkSpacePath, fileName), mode='wb') as file:\n",
    "    file.write(response.content)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['WeRateDog_archive_master.csv',\n",
       " '.ipynb_checkpoints',\n",
       " 'info.csv',\n",
       " 'twitter-archive-enhanced.csv',\n",
       " 'wrangle_act.ipynb',\n",
       " 'image-predictions.tsv',\n",
       " 'tweet_json.txt']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir('/home/workspace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2070</th>\n",
       "      <td>671122204919246848</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-30 00:22:57 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Two miniature golden retrievers here. Webbed p...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/671122204...</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>855818117272018944</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-04-22 16:18:34 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>I HEARD HE TIED HIS OWN BOWTIE MARK AND HE JUS...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/markhalperin/status/855656...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>750101899009982464</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-07-04 23:00:03 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Meet Lilah. She agreed on one quick pic. Now s...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/750101899...</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>Lilah</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "2070  671122204919246848                    NaN                  NaN   \n",
       "192   855818117272018944                    NaN                  NaN   \n",
       "971   750101899009982464                    NaN                  NaN   \n",
       "\n",
       "                      timestamp  \\\n",
       "2070  2015-11-30 00:22:57 +0000   \n",
       "192   2017-04-22 16:18:34 +0000   \n",
       "971   2016-07-04 23:00:03 +0000   \n",
       "\n",
       "                                                 source  \\\n",
       "2070  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "192   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "971   <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  retweeted_status_id  \\\n",
       "2070  Two miniature golden retrievers here. Webbed p...                  NaN   \n",
       "192   I HEARD HE TIED HIS OWN BOWTIE MARK AND HE JUS...                  NaN   \n",
       "971   Meet Lilah. She agreed on one quick pic. Now s...                  NaN   \n",
       "\n",
       "      retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "2070                       NaN                        NaN   \n",
       "192                        NaN                        NaN   \n",
       "971                        NaN                        NaN   \n",
       "\n",
       "                                          expanded_urls  rating_numerator  \\\n",
       "2070  https://twitter.com/dog_rates/status/671122204...                 4   \n",
       "192   https://twitter.com/markhalperin/status/855656...                13   \n",
       "971   https://twitter.com/dog_rates/status/750101899...                11   \n",
       "\n",
       "      rating_denominator   name doggo floofer pupper puppo  \n",
       "2070                  10   None  None    None   None  None  \n",
       "192                   10   None  None    None   None  None  \n",
       "971                   10  Lilah  None    None   None  None  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df = pd.read_csv('twitter-archive-enhanced.csv')\n",
    "archive_df.sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Each tweet's retweet count and favorite (\"like\") count at minimum, and any additional data you find interesting. Using the tweet IDs in the WeRateDogs Twitter archive, query the Twitter API for each tweet's JSON data using Python's Tweepy library and store each tweet's entire set of JSON data in a file called `tweet_json.txt` file. Each tweet's JSON data should be written to its own line. Then read this `.txt` file line by line into a pandas DataFrame with (at minimum) tweet ID, retweet count, and favorite count. Note: do not include your Twitter API keys, secrets, and tokens in your project submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import tweepy and setup tweepy client object\n",
    "import tweepy\n",
    "\n",
    "consumer_key = '...'\n",
    "consumer_secret = '...'\n",
    "access_token = '...'\n",
    "access_secret = '...'\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_secret)\n",
    "\n",
    "api = tweepy.API(auth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error for: 888202515573088257\n",
      "Error for: 873697596434513921\n",
      "Error for: 872668790621863937\n",
      "Error for: 872261713294495745\n"
     ]
    }
   ],
   "source": [
    "tweet_result = {}\n",
    "for tweet_id in list(archive_df.tweet_id):\n",
    "    try:\n",
    "        tweet_status = api.get_status(tweet_id, tweet_mode='extended', wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n",
    "        tweet_result[str(tweet_id)] = tweet_status._json\n",
    "    except Exception as e:\n",
    "        print(\"Error for: \" + str(tweet_id))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('tweet_json.txt', 'w') as file:\n",
    "    json.dump(tweet_result, file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with open('tweet_json.txt') as file:\n",
    "    data = json.load(file)\n",
    "\n",
    "df_list = []\n",
    "\n",
    "for tweet_id in data.keys():\n",
    "    favorite = data[tweet_id]['favorite_count']\n",
    "    retweet = data[tweet_id]['retweet_count']\n",
    "    df_list.append({'tweet_id':tweet_id, 'retweet_count':retweet, 'favorite_count':favorite})\n",
    "\n",
    "info_df = pd.DataFrame(df_list, columns = ['tweet_id', 'retweet_count', 'favorite_count'])\n",
    "info_df.to_csv('info.csv')\n",
    "os.listdir('/home/workspace')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Assessing Data**\n",
    "Detect and document at least eight (8) quality issues and two (2) tidiness issues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "info_df = pd.read_csv('info.csv')\n",
    "archive_df = pd.read_csv('twitter-archive-enhanced.csv')\n",
    "img_df = pd.read_csv('image-predictions.tsv',sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have 3 dataframes:\n",
    "- `info_df` contains tweet_id, retweet count and favorite count\n",
    "- `archive_df` contains tweet_id, dog rating, dog type and name\n",
    "- `img_df` contains is a neutral network that prediction a dog's breed based on the image of the dog\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2337 entries, 0 to 2336\n",
      "Data columns (total 4 columns):\n",
      "Unnamed: 0        2337 non-null int64\n",
      "tweet_id          2337 non-null int64\n",
      "retweet_count     2337 non-null int64\n",
      "favorite_count    2337 non-null int64\n",
      "dtypes: int64(4)\n",
      "memory usage: 73.1 KB\n"
     ]
    }
   ],
   "source": [
    "info_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      "tweet_id                      2356 non-null int64\n",
      "in_reply_to_status_id         78 non-null float64\n",
      "in_reply_to_user_id           78 non-null float64\n",
      "timestamp                     2356 non-null object\n",
      "source                        2356 non-null object\n",
      "text                          2356 non-null object\n",
      "retweeted_status_id           181 non-null float64\n",
      "retweeted_status_user_id      181 non-null float64\n",
      "retweeted_status_timestamp    181 non-null object\n",
      "expanded_urls                 2297 non-null object\n",
      "rating_numerator              2356 non-null int64\n",
      "rating_denominator            2356 non-null int64\n",
      "name                          2356 non-null object\n",
      "doggo                         2356 non-null object\n",
      "floofer                       2356 non-null object\n",
      "pupper                        2356 non-null object\n",
      "puppo                         2356 non-null object\n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "archive_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2075 entries, 0 to 2074\n",
      "Data columns (total 12 columns):\n",
      "tweet_id    2075 non-null int64\n",
      "jpg_url     2075 non-null object\n",
      "img_num     2075 non-null int64\n",
      "p1          2075 non-null object\n",
      "p1_conf     2075 non-null float64\n",
      "p1_dog      2075 non-null bool\n",
      "p2          2075 non-null object\n",
      "p2_conf     2075 non-null float64\n",
      "p2_dog      2075 non-null bool\n",
      "p3          2075 non-null object\n",
      "p3_conf     2075 non-null float64\n",
      "p3_dog      2075 non-null bool\n",
      "dtypes: bool(3), float64(3), int64(2), object(4)\n",
      "memory usage: 152.1+ KB\n"
     ]
    }
   ],
   "source": [
    "img_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2337.000000</td>\n",
       "      <td>2.337000e+03</td>\n",
       "      <td>2337.000000</td>\n",
       "      <td>2337.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1168.000000</td>\n",
       "      <td>7.420692e+17</td>\n",
       "      <td>2873.663243</td>\n",
       "      <td>7834.970475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>674.778112</td>\n",
       "      <td>6.824243e+16</td>\n",
       "      <td>4854.146683</td>\n",
       "      <td>12146.463934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>584.000000</td>\n",
       "      <td>6.783345e+17</td>\n",
       "      <td>579.000000</td>\n",
       "      <td>1357.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1168.000000</td>\n",
       "      <td>7.185406e+17</td>\n",
       "      <td>1344.000000</td>\n",
       "      <td>3414.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1752.000000</td>\n",
       "      <td>7.986825e+17</td>\n",
       "      <td>3350.000000</td>\n",
       "      <td>9593.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2336.000000</td>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>82340.000000</td>\n",
       "      <td>162011.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0      tweet_id  retweet_count  favorite_count\n",
       "count  2337.000000  2.337000e+03    2337.000000     2337.000000\n",
       "mean   1168.000000  7.420692e+17    2873.663243     7834.970475\n",
       "std     674.778112  6.824243e+16    4854.146683    12146.463934\n",
       "min       0.000000  6.660209e+17       1.000000        0.000000\n",
       "25%     584.000000  6.783345e+17     579.000000     1357.000000\n",
       "50%    1168.000000  7.185406e+17    1344.000000     3414.000000\n",
       "75%    1752.000000  7.986825e+17    3350.000000     9593.000000\n",
       "max    2336.000000  8.924206e+17   82340.000000   162011.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.356000e+03</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>2356.000000</td>\n",
       "      <td>2356.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.427716e+17</td>\n",
       "      <td>7.455079e+17</td>\n",
       "      <td>2.014171e+16</td>\n",
       "      <td>7.720400e+17</td>\n",
       "      <td>1.241698e+16</td>\n",
       "      <td>13.126486</td>\n",
       "      <td>10.455433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.856705e+16</td>\n",
       "      <td>7.582492e+16</td>\n",
       "      <td>1.252797e+17</td>\n",
       "      <td>6.236928e+16</td>\n",
       "      <td>9.599254e+16</td>\n",
       "      <td>45.876648</td>\n",
       "      <td>6.745237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>6.658147e+17</td>\n",
       "      <td>1.185634e+07</td>\n",
       "      <td>6.661041e+17</td>\n",
       "      <td>7.832140e+05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.783989e+17</td>\n",
       "      <td>6.757419e+17</td>\n",
       "      <td>3.086374e+08</td>\n",
       "      <td>7.186315e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.196279e+17</td>\n",
       "      <td>7.038708e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>7.804657e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.993373e+17</td>\n",
       "      <td>8.257804e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>8.203146e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>8.862664e+17</td>\n",
       "      <td>8.405479e+17</td>\n",
       "      <td>8.874740e+17</td>\n",
       "      <td>7.874618e+17</td>\n",
       "      <td>1776.000000</td>\n",
       "      <td>170.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "count  2.356000e+03           7.800000e+01         7.800000e+01   \n",
       "mean   7.427716e+17           7.455079e+17         2.014171e+16   \n",
       "std    6.856705e+16           7.582492e+16         1.252797e+17   \n",
       "min    6.660209e+17           6.658147e+17         1.185634e+07   \n",
       "25%    6.783989e+17           6.757419e+17         3.086374e+08   \n",
       "50%    7.196279e+17           7.038708e+17         4.196984e+09   \n",
       "75%    7.993373e+17           8.257804e+17         4.196984e+09   \n",
       "max    8.924206e+17           8.862664e+17         8.405479e+17   \n",
       "\n",
       "       retweeted_status_id  retweeted_status_user_id  rating_numerator  \\\n",
       "count         1.810000e+02              1.810000e+02       2356.000000   \n",
       "mean          7.720400e+17              1.241698e+16         13.126486   \n",
       "std           6.236928e+16              9.599254e+16         45.876648   \n",
       "min           6.661041e+17              7.832140e+05          0.000000   \n",
       "25%           7.186315e+17              4.196984e+09         10.000000   \n",
       "50%           7.804657e+17              4.196984e+09         11.000000   \n",
       "75%           8.203146e+17              4.196984e+09         12.000000   \n",
       "max           8.874740e+17              7.874618e+17       1776.000000   \n",
       "\n",
       "       rating_denominator  \n",
       "count         2356.000000  \n",
       "mean            10.455433  \n",
       "std              6.745237  \n",
       "min              0.000000  \n",
       "25%             10.000000  \n",
       "50%             10.000000  \n",
       "75%             10.000000  \n",
       "max            170.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>654</td>\n",
       "      <td>790227638568808452</td>\n",
       "      <td>3859</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>483</th>\n",
       "      <td>483</td>\n",
       "      <td>813157409116065792</td>\n",
       "      <td>2390</td>\n",
       "      <td>8177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>148</td>\n",
       "      <td>862096992088072192</td>\n",
       "      <td>23165</td>\n",
       "      <td>73749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1557</th>\n",
       "      <td>1557</td>\n",
       "      <td>687476254459715584</td>\n",
       "      <td>559</td>\n",
       "      <td>2050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1514</th>\n",
       "      <td>1514</td>\n",
       "      <td>690005060500217858</td>\n",
       "      <td>1776</td>\n",
       "      <td>3790</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0            tweet_id  retweet_count  favorite_count\n",
       "654          654  790227638568808452           3859               0\n",
       "483          483  813157409116065792           2390            8177\n",
       "148          148  862096992088072192          23165           73749\n",
       "1557        1557  687476254459715584            559            2050\n",
       "1514        1514  690005060500217858           1776            3790"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.075000e+03</td>\n",
       "      <td>2075.000000</td>\n",
       "      <td>2075.000000</td>\n",
       "      <td>2.075000e+03</td>\n",
       "      <td>2.075000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.384514e+17</td>\n",
       "      <td>1.203855</td>\n",
       "      <td>0.594548</td>\n",
       "      <td>1.345886e-01</td>\n",
       "      <td>6.032417e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.785203e+16</td>\n",
       "      <td>0.561875</td>\n",
       "      <td>0.271174</td>\n",
       "      <td>1.006657e-01</td>\n",
       "      <td>5.090593e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044333</td>\n",
       "      <td>1.011300e-08</td>\n",
       "      <td>1.740170e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.764835e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.364412</td>\n",
       "      <td>5.388625e-02</td>\n",
       "      <td>1.622240e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.119988e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.588230</td>\n",
       "      <td>1.181810e-01</td>\n",
       "      <td>4.944380e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.932034e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.843855</td>\n",
       "      <td>1.955655e-01</td>\n",
       "      <td>9.180755e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.880140e-01</td>\n",
       "      <td>2.734190e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id      img_num      p1_conf       p2_conf       p3_conf\n",
       "count  2.075000e+03  2075.000000  2075.000000  2.075000e+03  2.075000e+03\n",
       "mean   7.384514e+17     1.203855     0.594548  1.345886e-01  6.032417e-02\n",
       "std    6.785203e+16     0.561875     0.271174  1.006657e-01  5.090593e-02\n",
       "min    6.660209e+17     1.000000     0.044333  1.011300e-08  1.740170e-10\n",
       "25%    6.764835e+17     1.000000     0.364412  5.388625e-02  1.622240e-02\n",
       "50%    7.119988e+17     1.000000     0.588230  1.181810e-01  4.944380e-02\n",
       "75%    7.932034e+17     1.000000     0.843855  1.955655e-01  9.180755e-02\n",
       "max    8.924206e+17     4.000000     1.000000  4.880140e-01  2.734190e-01"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Unnamed: 0, tweet_id, retweet_count, favorite_count]\n",
       "Index: []"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "info_df[info_df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [tweet_id, jpg_url, img_num, p1, p1_conf, p1_dog, p2, p2_conf, p2_dog, p3, p3_conf, p3_dog]\n",
       "Index: []"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img_df[img_df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [tweet_id, in_reply_to_status_id, in_reply_to_user_id, timestamp, source, text, retweeted_status_id, retweeted_status_user_id, retweeted_status_timestamp, expanded_urls, rating_numerator, rating_denominator, name, doggo, floofer, pupper, puppo]\n",
       "Index: []"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df[archive_df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10     2333\n",
       "11        3\n",
       "50        3\n",
       "80        2\n",
       "20        2\n",
       "2         1\n",
       "16        1\n",
       "40        1\n",
       "70        1\n",
       "15        1\n",
       "90        1\n",
       "110       1\n",
       "120       1\n",
       "130       1\n",
       "150       1\n",
       "170       1\n",
       "7         1\n",
       "0         1\n",
       "Name: rating_denominator, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df.rating_denominator.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12      558\n",
       "11      464\n",
       "10      461\n",
       "13      351\n",
       "9       158\n",
       "8       102\n",
       "7        55\n",
       "14       54\n",
       "5        37\n",
       "6        32\n",
       "3        19\n",
       "4        17\n",
       "1         9\n",
       "2         9\n",
       "420       2\n",
       "0         2\n",
       "15        2\n",
       "75        2\n",
       "80        1\n",
       "20        1\n",
       "24        1\n",
       "26        1\n",
       "44        1\n",
       "50        1\n",
       "60        1\n",
       "165       1\n",
       "84        1\n",
       "88        1\n",
       "144       1\n",
       "182       1\n",
       "143       1\n",
       "666       1\n",
       "960       1\n",
       "1776      1\n",
       "17        1\n",
       "27        1\n",
       "45        1\n",
       "99        1\n",
       "121       1\n",
       "204       1\n",
       "Name: rating_numerator, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df.rating_numerator.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None        745\n",
       "a            55\n",
       "Charlie      12\n",
       "Lucy         11\n",
       "Cooper       11\n",
       "Oliver       11\n",
       "Penny        10\n",
       "Lola         10\n",
       "Tucker       10\n",
       "Winston       9\n",
       "Bo            9\n",
       "the           8\n",
       "Sadie         8\n",
       "Daisy         7\n",
       "Bailey        7\n",
       "Toby          7\n",
       "Buddy         7\n",
       "an            7\n",
       "Stanley       6\n",
       "Koda          6\n",
       "Jax           6\n",
       "Rusty         6\n",
       "Scout         6\n",
       "Jack          6\n",
       "Leo           6\n",
       "Bella         6\n",
       "Dave          6\n",
       "Milo          6\n",
       "Oscar         6\n",
       "George        5\n",
       "           ... \n",
       "Emanuel       1\n",
       "my            1\n",
       "River         1\n",
       "Pilot         1\n",
       "Boots         1\n",
       "Amélie        1\n",
       "Tango         1\n",
       "Tycho         1\n",
       "Bayley        1\n",
       "Dobby         1\n",
       "Yukon         1\n",
       "Zooey         1\n",
       "Bobb          1\n",
       "Brooks        1\n",
       "Ralph         1\n",
       "Aiden         1\n",
       "Superpup      1\n",
       "Ashleigh      1\n",
       "Beckham       1\n",
       "Beemo         1\n",
       "Lilli         1\n",
       "Combo         1\n",
       "Stefan        1\n",
       "Luther        1\n",
       "Angel         1\n",
       "Champ         1\n",
       "Tom           1\n",
       "Miguel        1\n",
       "Moofasa       1\n",
       "Blipson       1\n",
       "Name: name, Length: 957, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_df.name.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Quality issues:\n",
    "- `tweet_id` column data type should be string instead of int\n",
    "- `rating_denominator`, `rating_numerator` column data type should be string instead of int\n",
    "- There are tweets any image. We only want tweets with image.\n",
    "- We only want original tweets, not retweets\n",
    "- Some denominators and numerators are incorrect.\n",
    "- Dog stages are incorrect\n",
    "- For the dog stages `name`, `doggo`, `floofer`, `pupper`, `puppo`, null value are represented by `None` instead of `Nan`\n",
    "- Remove duplicated tweet\n",
    "- `timestamp` should be in to_datetime data type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tidiness issues:\n",
    "1. `rating_numerator` and `rating_denominator` should be in one column\n",
    "2. `doggo`, `floofer`, `pupper`, `puppo` should be in one column\n",
    "3. Any dog with more than 1 dog stage should have `stage` value of `multiple`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean = archive_df.copy()\n",
    "info_clean = info_df.copy()\n",
    "img_clean = img_df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Quality issues\n",
    "\n",
    "- `tweet_id`,`rating_denominator`, `rating_numerator` column data type should be string instead of int\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean.tweet_id = archive_clean.tweet_id.astype(str)\n",
    "info_clean.tweet_id = info_clean.tweet_id.astype(str)\n",
    "img_clean.tweet_id = img_clean.tweet_id.astype(str)\n",
    "\n",
    "archive_clean.rating_denominator = archive_clean.rating_denominator.astype(str)\n",
    "archive_clean.rating_numerator = archive_clean.rating_numerator.astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Dog stage name is incorrect - `floofer` should be `floof`. We will also have to update the value of the column to `floof`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "newColumns = ['tweet_id', 'in_reply_to_status_id', 'in_reply_to_user_id', 'timestamp',\n",
    "       'source', 'text', 'retweeted_status_id', 'retweeted_status_user_id',\n",
    "       'retweeted_status_timestamp', 'expanded_urls', 'rating_numerator',\n",
    "       'rating_denominator', 'name', 'doggo', 'floof', 'pupper', 'puppo']\n",
    "\n",
    "archive_clean.columns = newColumns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean.loc[archive_clean.floof == 'floofer',['floof']] = 'floof'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Tidiness issues\n",
    "The dog stage columns to be combined into 1 column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean[['doggo','floof','puppo','pupper']] = archive_clean[['doggo','floof','puppo','pupper']].replace('None','')\n",
    "archive_clean['stage'] = archive_clean.doggo.str.cat([archive_clean.floof,archive_clean.puppo,archive_clean.pupper])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean['stage'] = archive_clean['stage'].replace('',np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pupper         245\n",
       "doggo          83 \n",
       "puppo          29 \n",
       "doggopupper    12 \n",
       "floof          9  \n",
       "doggofloof     1  \n",
       "doggopuppo     1  \n",
       "Name: stage, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_clean['stage'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to change the value of row with more than 1 stage to `multiple`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean.loc[archive_clean.stage == 'doggopupper',['stage']] = 'multiple'\n",
    "archive_clean.loc[archive_clean.stage == 'doggofloof',['stage']] = 'multiple'\n",
    "archive_clean.loc[archive_clean.stage == 'doggopuppo',['stage']] = 'multiple'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pupper      245\n",
       "doggo       83 \n",
       "puppo       29 \n",
       "multiple    14 \n",
       "floof       9  \n",
       "Name: stage, dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_clean['stage'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean = archive_clean.drop(['doggo','floof','pupper','puppo'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- There are tweets any image. We only want tweets with image. \n",
    "Since `info_clean` is the table of dog image, we want use to do a merge of `info_clean` and `archive_clean` using the `tweet_id` column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "image_df = info_clean[['tweet_id','retweet_count','favorite_count']]\n",
    "tweet_clean = pd.merge(archive_clean, image_df, on=['tweet_id'],how = 'inner')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we will also merge in `img_clean`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean = pd.merge(tweet_clean, img_clean, on=['tweet_id'],how = 'inner')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Since we only want original tweets and not reply-tweets or retweets. We will remove any tweet with `in_reply_to_status_id` or `retweeted_status_id` value that is not null."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean = tweet_clean[tweet_clean.in_reply_to_status_id.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean = tweet_clean[tweet_clean.retweeted_status_id.isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Dog rating are incorrect. Denominators are always 10 and numerators are always above 10. \n",
    "We will manually examine the data and correct them if we can. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>820690176645140481</td>\n",
       "      <td>The floofs have been released I repeat the floofs have been released. 84/70 https://t.co/NIYC820tmd</td>\n",
       "      <td>84</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>810984652412424192</td>\n",
       "      <td>Meet Sam. She smiles 24/7 &amp;amp; secretly aspires to be a reindeer. \\nKeep Sam smiling by clicking and sharing this link:\\nhttps://t.co/98tB8y7y7t https://t.co/LouL5vdvxx</td>\n",
       "      <td>24</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>758467244762497024</td>\n",
       "      <td>Why does this never happen at my front door... 165/150 https://t.co/HmwrdfEfUE</td>\n",
       "      <td>165</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>740373189193256964</td>\n",
       "      <td>After so many requests, this is Bretagne. She was the last surviving 9/11 search dog, and our second ever 14/10. RIP https://t.co/XAVDNDaVgQ</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>731156023742988288</td>\n",
       "      <td>Say hello to this unbelievably well behaved squad of doggos. 204/170 would try to pet all at once https://t.co/yGQI3He3xv</td>\n",
       "      <td>204</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>960</th>\n",
       "      <td>722974582966214656</td>\n",
       "      <td>Happy 4/20 from the squad! 13/10 for all https://t.co/eV1diwds8a</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>716439118184652801</td>\n",
       "      <td>This is Bluebert. He just saw that both #FinalFur match ups are split 50/50. Amazed af. 11/10 https://t.co/Kky1DPG4iq</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1015</th>\n",
       "      <td>713900603437621249</td>\n",
       "      <td>Happy Saturday here's 9 puppers on a bench. 99/90 good work everybody https://t.co/mpvaVxKmc1</td>\n",
       "      <td>99</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1040</th>\n",
       "      <td>710658690886586372</td>\n",
       "      <td>Here's a brigade of puppers. All look very prepared for whatever happens next. 80/80 https://t.co/0eb7R1Om12</td>\n",
       "      <td>80</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058</th>\n",
       "      <td>709198395643068416</td>\n",
       "      <td>From left to right:\\nCletus, Jerome, Alejandro, Burp, &amp;amp; Titson\\nNone know where camera is. 45/50 would hug all at once https://t.co/sedre1ivTK</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1124</th>\n",
       "      <td>704054845121142784</td>\n",
       "      <td>Here is a whole flock of puppers.  60/50 I'll take the lot https://t.co/9dpcw6MdWa</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1200</th>\n",
       "      <td>697463031882764288</td>\n",
       "      <td>Happy Wednesday here's a bucket of pups. 44/40 would pet all at once https://t.co/HppvrYuamZ</td>\n",
       "      <td>44</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1373</th>\n",
       "      <td>684222868335505415</td>\n",
       "      <td>Someone help the girl is being mugged. Several are distracting her while two steal her shoes. Clever puppers 121/110 https://t.co/1zfnTJLt55</td>\n",
       "      <td>121</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1398</th>\n",
       "      <td>682962037429899265</td>\n",
       "      <td>This is Darrel. He just robbed a 7/11 and is in a high speed police chase. Was just spotted by the helicopter 10/10 https://t.co/7EsP8LmSp5</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1504</th>\n",
       "      <td>677716515794329600</td>\n",
       "      <td>IT'S PUPPERGEDDON. Total of 144/120 ...I think https://t.co/ZanVtAtvIq</td>\n",
       "      <td>144</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1563</th>\n",
       "      <td>675853064436391936</td>\n",
       "      <td>Here we have an entire platoon of puppers. Total score: 88/80 would pet all at once https://t.co/y93p6FLvVw</td>\n",
       "      <td>88</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2044</th>\n",
       "      <td>666287406224695296</td>\n",
       "      <td>This is an Albanian 3 1/2 legged  Episcopalian. Loves well-polished hardwood flooring. Penis on the collar. 9/10 https://t.co/d9NcXFKwLv</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  \\\n",
       "339   820690176645140481   \n",
       "409   810984652412424192   \n",
       "728   758467244762497024   \n",
       "869   740373189193256964   \n",
       "917   731156023742988288   \n",
       "960   722974582966214656   \n",
       "994   716439118184652801   \n",
       "1015  713900603437621249   \n",
       "1040  710658690886586372   \n",
       "1058  709198395643068416   \n",
       "1124  704054845121142784   \n",
       "1200  697463031882764288   \n",
       "1373  684222868335505415   \n",
       "1398  682962037429899265   \n",
       "1504  677716515794329600   \n",
       "1563  675853064436391936   \n",
       "2044  666287406224695296   \n",
       "\n",
       "                                                                                                                                                                           text  \\\n",
       "339   The floofs have been released I repeat the floofs have been released. 84/70 https://t.co/NIYC820tmd                                                                         \n",
       "409   Meet Sam. She smiles 24/7 &amp; secretly aspires to be a reindeer. \\nKeep Sam smiling by clicking and sharing this link:\\nhttps://t.co/98tB8y7y7t https://t.co/LouL5vdvxx   \n",
       "728   Why does this never happen at my front door... 165/150 https://t.co/HmwrdfEfUE                                                                                              \n",
       "869   After so many requests, this is Bretagne. She was the last surviving 9/11 search dog, and our second ever 14/10. RIP https://t.co/XAVDNDaVgQ                                \n",
       "917   Say hello to this unbelievably well behaved squad of doggos. 204/170 would try to pet all at once https://t.co/yGQI3He3xv                                                   \n",
       "960   Happy 4/20 from the squad! 13/10 for all https://t.co/eV1diwds8a                                                                                                            \n",
       "994   This is Bluebert. He just saw that both #FinalFur match ups are split 50/50. Amazed af. 11/10 https://t.co/Kky1DPG4iq                                                       \n",
       "1015  Happy Saturday here's 9 puppers on a bench. 99/90 good work everybody https://t.co/mpvaVxKmc1                                                                               \n",
       "1040  Here's a brigade of puppers. All look very prepared for whatever happens next. 80/80 https://t.co/0eb7R1Om12                                                                \n",
       "1058  From left to right:\\nCletus, Jerome, Alejandro, Burp, &amp; Titson\\nNone know where camera is. 45/50 would hug all at once https://t.co/sedre1ivTK                          \n",
       "1124  Here is a whole flock of puppers.  60/50 I'll take the lot https://t.co/9dpcw6MdWa                                                                                          \n",
       "1200  Happy Wednesday here's a bucket of pups. 44/40 would pet all at once https://t.co/HppvrYuamZ                                                                                \n",
       "1373  Someone help the girl is being mugged. Several are distracting her while two steal her shoes. Clever puppers 121/110 https://t.co/1zfnTJLt55                                \n",
       "1398  This is Darrel. He just robbed a 7/11 and is in a high speed police chase. Was just spotted by the helicopter 10/10 https://t.co/7EsP8LmSp5                                 \n",
       "1504  IT'S PUPPERGEDDON. Total of 144/120 ...I think https://t.co/ZanVtAtvIq                                                                                                      \n",
       "1563  Here we have an entire platoon of puppers. Total score: 88/80 would pet all at once https://t.co/y93p6FLvVw                                                                 \n",
       "2044  This is an Albanian 3 1/2 legged  Episcopalian. Loves well-polished hardwood flooring. Penis on the collar. 9/10 https://t.co/d9NcXFKwLv                                    \n",
       "\n",
       "     rating_numerator rating_denominator  \n",
       "339   84               70                 \n",
       "409   24               7                  \n",
       "728   165              150                \n",
       "869   9                11                 \n",
       "917   204              170                \n",
       "960   4                20                 \n",
       "994   50               50                 \n",
       "1015  99               90                 \n",
       "1040  80               80                 \n",
       "1058  45               50                 \n",
       "1124  60               50                 \n",
       "1200  44               40                 \n",
       "1373  121              110                \n",
       "1398  7                11                 \n",
       "1504  144              120                \n",
       "1563  88               80                 \n",
       "2044  1                2                  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_colwidth', -1)\n",
    "tweet_clean[tweet_clean.rating_denominator != '10'][['tweet_id','text','rating_numerator','rating_denominator']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean.loc[tweet_clean.tweet_id == '820690176645140481',['rating_numerator','rating_denominator']] = ['12','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '758467244762497024',['rating_numerator','rating_denominator']] = ['11','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '740373189193256964',['rating_numerator','rating_denominator']] = ['14','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '731156023742988288',['rating_numerator','rating_denominator']] = ['12','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '722974582966214656',['rating_numerator','rating_denominator']] = ['13','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '716439118184652801',['rating_numerator','rating_denominator']] = ['11','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '713900603437621249',['rating_numerator','rating_denominator']] = ['11','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '704054845121142784',['rating_numerator','rating_denominator']] = ['12','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '697463031882764288',['rating_numerator','rating_denominator']] = ['11','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '684222868335505415',['rating_numerator','rating_denominator']] = ['11','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '677716515794329600',['rating_numerator','rating_denominator']] = ['12','10']\n",
    "tweet_clean.loc[tweet_clean.tweet_id == '675853064436391936',['rating_numerator','rating_denominator']] = ['11','10']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tidiness issues\n",
    "Now, we will merge the rating columns into one column called `rating`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean['rating'] = tweet_clean.rating_numerator + '/' + tweet_clean.rating_denominator\n",
    "tweet_clean = tweet_clean.drop(['rating_numerator','rating_denominator'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I will first remove `retweeted_status_id`,`retweeted_status_user_id`,`retweeted_status_timestamp`, `retweeted_status_id`,`in_reply_to_user_id`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean = tweet_clean.drop(['retweeted_status_timestamp', 'retweeted_status_user_id','retweeted_status_id','in_reply_to_user_id','in_reply_to_status_id'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We will try to remove any duplicated row if there is any"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>...</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [tweet_id, timestamp, source, text, expanded_urls, name, stage, retweet_count, favorite_count, jpg_url, img_num, p1, p1_conf, p1_dog, p2, p2_conf, p2_dog, p3, p3_conf, p3_dog, rating]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 21 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_clean[tweet_clean.duplicated()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Lastly, `timestamp` should be in `datatime` object type\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean.timestamp = pd.to_datetime(tweet_clean.timestamp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Storing, Analyzing, and Visualizing Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now save this cleaned dataframe to a `master.csv` file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean.to_csv('twitter_archive_master.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_clean = pd.read_csv('twitter_archive_master.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.967000e+03</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>1.967000e+03</td>\n",
       "      <td>1.967000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.359367e+17</td>\n",
       "      <td>2619.346721</td>\n",
       "      <td>8636.936960</td>\n",
       "      <td>1.201830</td>\n",
       "      <td>0.593962</td>\n",
       "      <td>1.347112e-01</td>\n",
       "      <td>6.025337e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.746931e+16</td>\n",
       "      <td>4673.402780</td>\n",
       "      <td>12666.159309</td>\n",
       "      <td>0.559244</td>\n",
       "      <td>0.271980</td>\n",
       "      <td>1.009816e-01</td>\n",
       "      <td>5.094543e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044333</td>\n",
       "      <td>1.011300e-08</td>\n",
       "      <td>1.740170e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.758494e+17</td>\n",
       "      <td>584.000000</td>\n",
       "      <td>1853.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.362880</td>\n",
       "      <td>5.370120e-02</td>\n",
       "      <td>1.619495e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.088109e+17</td>\n",
       "      <td>1261.000000</td>\n",
       "      <td>3909.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.587372</td>\n",
       "      <td>1.174020e-01</td>\n",
       "      <td>4.947150e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.879251e+17</td>\n",
       "      <td>2993.500000</td>\n",
       "      <td>10784.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.846807</td>\n",
       "      <td>1.955655e-01</td>\n",
       "      <td>9.158675e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>82340.000000</td>\n",
       "      <td>162011.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.880140e-01</td>\n",
       "      <td>2.734190e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id  retweet_count  favorite_count      img_num      p1_conf  \\\n",
       "count  1.967000e+03    1967.000000     1967.000000  1967.000000  1967.000000   \n",
       "mean   7.359367e+17    2619.346721     8636.936960     1.201830     0.593962   \n",
       "std    6.746931e+16    4673.402780    12666.159309     0.559244     0.271980   \n",
       "min    6.660209e+17      11.000000       76.000000     1.000000     0.044333   \n",
       "25%    6.758494e+17     584.000000     1853.500000     1.000000     0.362880   \n",
       "50%    7.088109e+17    1261.000000     3909.000000     1.000000     0.587372   \n",
       "75%    7.879251e+17    2993.500000    10784.500000     1.000000     0.846807   \n",
       "max    8.924206e+17   82340.000000   162011.000000     4.000000     1.000000   \n",
       "\n",
       "            p2_conf       p3_conf  \n",
       "count  1.967000e+03  1.967000e+03  \n",
       "mean   1.347112e-01  6.025337e-02  \n",
       "std    1.009816e-01  5.094543e-02  \n",
       "min    1.011300e-08  1.740170e-10  \n",
       "25%    5.370120e-02  1.619495e-02  \n",
       "50%    1.174020e-01  4.947150e-02  \n",
       "75%    1.955655e-01  9.158675e-02  \n",
       "max    4.880140e-01  2.734190e-01  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_clean.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n",
      "/opt/conda/lib/python3.6/site-packages/pandas/core/generic.py:4405: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6c7dddd630>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rating_popularity_analysis = tweet_clean[['rating','retweet_count','favorite_count']]\n",
    "rating_popularity_analysis['score'], rating_popularity_analysis['base'] = rating_popularity_analysis['rating'].str.split('/', 1).str\n",
    "\n",
    "rating_popularity_analysis.score = rating_popularity_analysis.score.astype(int)\n",
    "rating_popularity_analysis.base = rating_popularity_analysis.base.astype(int)\n",
    "\n",
    "rating_popularity_analysis = rating_popularity_analysis[rating_popularity_analysis.base == 10]\n",
    "rating_popularity_analysis = rating_popularity_analysis[rating_popularity_analysis.score > 10]\n",
    "rating_popularity_analysis = rating_popularity_analysis[rating_popularity_analysis.score < 15]\n",
    "\n",
    "popularity_group_by_rating_score = rating_popularity_analysis.groupby('score').mean()\n",
    "\n",
    "popularity_group_by_rating_score = popularity_group_by_rating_score.drop('base',axis=1)\n",
    "\n",
    "retweet_favorite_by_rating = popularity_group_by_rating_score.plot();\n",
    "plt.title('Rating - Retweet and Favorite Trend');\n",
    "plt.xlabel('Rating');\n",
    "plt.xticks(rating_popularity_analysis.score);\n",
    "plt.ylabel('Average Score');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6c7e8ce278>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stage_dist = tweet_clean.stage.hist();\n",
    "plt.title('Dog Stage Distribution');\n",
    "plt.xlabel('Dog Stage Distribution');\n",
    "plt.ylabel('Count');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f6c7de4fe48>"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Qfb534hscEBNTgJ+kd7Xs0tfWxVuIqtV31yhfAzwWmoaPJ6sn6SiDYHLyGr+b5ENFvlZLWJsUpQ1b1pTIOlg4PqI2KbGhet/361ZPcrjHw29f7P6JGkTsi87Pfx5rpxrDo1YquYeIqmlpC3JhvFNbcD9Hypp4/SPdDnZkL+FDbV/s3XoFOAxJ4aqrctfOtraE1lb/2Syds0/sbqTtiEcRlbtFllTxMhwVdOaOEllZANB6rOP7CvHzUpmZpbjZiUzM8tpss1KHTt2jK5duxYdhplZkzJ79ux3I6JTTcs12eTQtWtXZs2aVXQYZmZNiqTXal7KzUpmZlYJJwczM8txcjAzs5wm2+dgTd/KlSspKyvj448/LjoUq0GrVq3o0qUL66+/ftGhWANxcrDClJWV0aZNG7p27Uq6Xps1QhHB0qVLKSsrY9ttty06HGsgblaywnz88cd06NDBiaGRk0SHDh1cw2tmnBysUE4MTYPfp+bHycHMzHLc52CNRtdxf6rX7S285N/qbVtXXXUVY8eOZeONN663bZa66667+OY3v0n37t3XyfZrY/r06WywwQbsueeehcVgjYeTg1my6sbq6+Ur1FdddRXHHHPMOk0Ow4YNKzw5tG7d2slhXTm/XT1sY/nab6OW3KxkzdrChQvZaaedOPnkk+nbty8333wze+yxB3379uWoo47igw8+YPz48SxatIh99tmHffbZhylTpvDDH/4QgKuvvprttsvuHvrKK6+w1157ATB79mz23ntv+vXrx4EHHsjixYtXLXPQQQfRr18/Bg0axEsvvcTjjz/OPffcw5lnnkmfPn145ZVXKo11wYIF7L///vTu3Zu+ffvyyiuvEBGceeaZ9OjRg549ezJ58mQgO9EPGzZs1bqnnnoqEydOBLJLz5x33nn07duXnj178tJLL7Fw4UKuv/56rrzySvr06cOjjz66To63NR2uOVizN3/+fG644QYuvPBCjjzySB588EE22WQTLr30Uq644grOPfdcrrjiCqZNm0bHjh156623+OUvfwnAo48+SocOHXjzzTeZOXMmgwYNYuXKlZx22mncfffddOrUicmTJ/PTn/6UCRMmMHbsWK6//nq6devGU089xcknn8zDDz/M8OHDGTZsGCNGjKgyzu985zuMGzeOI444go8//pgvvviCP/7xj8yZM4dnn32Wd999l1133ZXBg3O3ac7p2LEjf/vb37j22mu5/PLL+f3vf8+JJ55I69at+a//+q96O7bWdDk5WLO3zTbbMGDAAO69915efPFFBg4cCMCnn37KHnvskVt+iy224IMPPmDFihW88cYbHH300cyYMYNHH32UI488kvnz5/PCCy9wwAHZrY8///xzOnfuzAcffMDjjz/OUUcdtWpbn3zySW77lVmxYgVvvvkmRxxxBJD9KA1g5syZjBo1ihYtWrD55puz99578/TTT9O2bdtqt3fkkUcC0K9fP/74xz/WKgZrXpwcrNnbZJNNgKzP4YADDmDSpEk1rrPHHntwww03sMMOOzBo0CAmTJjAE088wa9+9Stef/11dt55Z5544okvrfP++++z6aabMmfOnDrHWNVNuaoqb9myJV988cWq6Yq/Udhwww0BaNGiBZ999lmd47GvPvc5mCUDBgzgscceY8GCBQB89NFH/P3vfwegTZs2rFixYtWygwcP5vLLL2fw4MHssssuTJs2jQ033JB27dqxww47sGTJklXJYeXKlcydO5e2bduy7bbbcvvttwPZif3ZZ5+tdPsVtW3bli5dunDXXXcBWY3jo48+YvDgwUyePJnPP/+cJUuWMGPGDHbbbTe22WYbXnzxRT755BOWL1/OQw89VOPrrykGa15cc7BGoz6Hnq6JTp06MXHiREaNGrWquefiiy/mm9/8JmPHjuXggw+mc+fOTJs2jUGDBvHGG28wePBgWrRowVZbbcWOO+4IwAYbbMAdd9zB6aefzvLly/nss8/4/ve/z84778wtt9zCSSedxMUXX8zKlSsZOXIkvXv3ZuTIkXz3u99l/Pjx3HHHHWy//fa5+G6++Wa+973vce6557L++utz++23c8QRR/DEE0/Qu3dvJHHZZZexxRZbAPDtb3+bXr160a1bN3bZZZcaX/+hhx7KiBEjuPvuu/n1r3/NoEGD6vHoWlPTZO8h3b9///DNfpq2efPmsdNOOxUdhtWS36+11EiGskqaHRH9a1rOzUpmZpbjZiWzRuaUU07hscce+1LZGWecwXHHHVdQRNYcOTmYNTLXXHNN0SGY1dysJGkrSdMkzZM0V9IZqXwzSQ9Iejn9bZ/KJWm8pAWSnpPUt2RbY9LyL0saU1LeT9LzaZ3x8iUgzcwKVZs+h8+AH0XETsAA4BRJ3YFxwEMR0Q14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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6c7eff8390>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stage_popularity_analysis = tweet_clean[['stage','retweet_count','favorite_count']]\n",
    "stage_popularity_analysis.groupby('stage').mean().plot(kind='bar',title='Dog Stage - Reweet and Favorite Analysis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6c7ddbfd68>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stage_rating_analysis = tweet_clean[['rating','stage']]\n",
    "stage_rating_analysis = stage_rating_analysis[stage_rating_analysis['stage'].isnull() == False]\n",
    "\n",
    "stage_rating_analysis['score'], stage_rating_analysis['base'] = stage_rating_analysis['rating'].str.split('/', 1).str\n",
    "\n",
    "stage_rating_analysis.score = stage_rating_analysis.score.astype(int)\n",
    "stage_rating_analysis.base = stage_rating_analysis.base.astype(int)\n",
    "\n",
    "stage_rating_analysis = stage_rating_analysis[stage_rating_analysis.base == 10]\n",
    "stage_rating_analysis = stage_rating_analysis[stage_rating_analysis.score > 10]\n",
    "stage_rating_analysis = stage_rating_analysis[stage_rating_analysis.score < 15] \n",
    "stage_rating_analysis = stage_rating_analysis.drop(['base','rating'],axis=1)\n",
    "\n",
    "stage_rating_analysis.groupby('stage').mean().plot(kind='bar');\n",
    "plt.title('Dog Stage - average rating');\n",
    "plt.xlabel('Stage');\n",
    "plt.ylim(11,13);\n",
    "plt.ylabel('Average Score');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights\n",
    "\n",
    "1. There seems to be a positive correlation between dog rating to the both number of retweet and number of favorite.\n",
    "2. According to the graph on Dog stage distribution, pupper has the highest frequency.\n",
    "3. Interestingly, pupper has the lowest favorite counts and retweet counts, as well as rating."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
